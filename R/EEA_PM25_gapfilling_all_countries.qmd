---
title: "Gapfilling of hourly PM2.5 data for all countries"
author: "Johannes Heisig"
date: "`r Sys.Date()`"
format: 
  gfm: default
  html: default
knitr:
  opts_knit:
    root.dir: "/mnt/cloud/wwu1/ec_bronze/_nogroup/ae78a1ca-a0e8-4e4e-8992-69c34947db65/UseCase_AIRCON"
---

```{r}
suppressPackageStartupMessages({
library(dplyr)
library(arrow)
library(tictoc)
library(stars)
})
source("R/functions.R")
station_meta = geoarrow::read_geoparquet_sf("AQ_stations/EEA_stations_meta_sf.parquet")
```


# Read Data

Open hourly data for all 40 countries, but filter while reading to limit memory needs (using the arrow library). Here we are reading only data relevant for building a linear gap-filling model (so `PM2.5 > 0 & PM10 > 0`).

```{r}
tic()
aq = open_dataset("AQ_data/02_hourly_SSR") |> 
  filter(!is.na(PM10), !is.na(PM2.5), PM2.5 > 0, PM10 > 0) |> 
  collect()
pm2.5_99.9 = quantile(aq$PM2.5, 0.999)
pm10_99.9 = quantile(aq$PM10, 0.999)
aq = filter(aq, PM2.5 <= pm2.5_99.9, PM10 <= pm10_99.9)
toc()
```

```{r}
aq
nrow(aq) 
```

# Add Population Density Information

Extract population density values from SEDAC raster at each station location.

```{r}
pop = read_stars("supplementary/static/pop_density_original_epsg3035.tif")
pop_ex = st_extract(pop[1], 
                    station_meta |> 
                      st_transform(st_crs(3035))) |> 
  st_drop_geometry() |> 
  setNames("Population")

pop_stations = cbind(Air.Quality.Station.EoI.Code = station_meta$Air.Quality.Station.EoI.Code,
                     Station.Type = station_meta$Station.Type,
                     pop_ex) 
```

Join based on station id.

```{r}
tic()
aq = left_join(aq, pop_stations, by = "Air.Quality.Station.EoI.Code") |> 
  filter(!is.na(Population))
toc()
```


# Gapfilling Model (as proposed by Denby 2011 and Horalek et al. 2019)

Simple linear model to predict PM2.5 concentrations from PM10, population density, surface solar radiation and coordinates. Model includes interactions for station type (background vs traffic) but not for station area.

```{r}
lm_pm2.5 = lm(PM2.5 ~ (PM10 + Population + SSR + Longitude + Latitude) * Station.Type , data = aq)

summary(lm_pm2.5)
caret::RMSE(predict(lm_pm2.5), lm_pm2.5$model$PM2.5)
```

```{r, eval=TRUE, include=FALSE}
rm(aq)
gc()
```

# Prediction

Map over each country and predict PM2.5 for gaps where PM10 is available by applying the above model. The function `fill_pm2.5_gaps()` further adds a column named "pseudo" that indicates whether a value was actually measured (0) or inferred through gap-filling (1), before writing to (parquet) file.

```{r}
countries = as.character(unique(station_meta$Countrycode)) |> sort()
out_dir = "AQ_data/03_hourly_gapfilled"
filled = purrr::map_vec(countries, 
                        fill_pm2.5_gaps, 
                        model = lm_pm2.5, 
                        population_table = pop_stations,
                        gap_data = "AQ_data/02_hourly_SSR",
                        out_dir = out_dir, 
                        overwrite = T,
                        .progress = T)

filled |> basename()
```

# Results

Structure of the gap-filled data:
```{r}
(res = open_dataset(out_dir))
```


How many missing PM2.5 values were filled? (`filled_PM2.5==1`)

```{r}
res |> 
  count(filled_PM2.5) |> 
  collect()
```

