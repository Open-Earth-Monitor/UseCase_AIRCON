{
  "process_graph": {
    "1": {
      "process_id": "load_url",
      "arguments": {
        "format": "PARQUET",
        "url": "https://zenodo.org/records/14513586/files/airquality.no2.o3.so2.pm10.pm2p5_4.annual_pnt_20150101_20231231_eu_epsg.3035_v20240718.parquet?download=1"
      }
    },
    "load1": {
      "process_id": "load_stac",
      "arguments": {
        "url": "https://github.com/GeoScripting-WUR/VectorRaster/releases/download/exercise-data/cams_o3_2020-stac-item-gtiff.json"
      }
    },
    "load6": {
      "process_id": "load_collection",
      "arguments": {
        "id": "AGERA5",
        "spatial_extent": {
          "west": 5.563765056326457,
          "east": 7.819215368253948,
          "south": 51.821315223506765,
          "north": 52.18968462236922
        },
        "temporal_extent": [
          "2020-01-01T00:00:00Z",
          "2020-12-31T00:00:00Z"
        ],
        "bands": [
          "solar-radiation-flux",
          "wind-speed"
        ]
      }
    },
    "aggregate4": {
      "process_id": "aggregate_temporal",
      "arguments": {
        "data": {
          "from_node": "load6"
        },
        "intervals": [
          [
            "2020-01-01T00:00:00Z",
            "2021-01-01T00:00:00Z"
          ]
        ],
        "reducer": {
          "process_graph": {
            "first1": {
              "process_id": "first",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                }
              },
              "result": true
            }
          }
        }
      }
    },
    "merge8": {
      "process_id": "merge_cubes",
      "arguments": {
        "cube2": {
          "from_node": "aggregate4"
        },
        "cube1": {
          "from_node": "load1"
        }
      }
    },
    "save9": {
      "process_id": "save_result",
      "arguments": {
        "data": {
          "from_node": "apply3"
        },
        "format": "GTIFF"
      },
      "result": true
    },
    "apply3": {
      "process_id": "apply_dimension",
      "arguments": {
        "data": {
          "from_node": "merge8"
        },
        "process": {
          "process_graph": {
            "run1": {
              "process_id": "run_udf",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                },
                "context": {
                  "from_parameter": "context"
                },
                "runtime": "Python",
                "udf": "# Filter station geoParquet file\nimport geopandas\nimport logging\nfrom openeo.udf import XarrayDataCube\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(message)s'  # Simple format showing only the message\n)\nlogger = logging.getLogger(__name__)\n\ndef lnp(message):\n    \"\"\"Log and print the message\"\"\"\n    logger.info(message)\n    #print(message)\n\ndef apply_datacube(cube: XarrayDataCube, context: dict) -> XarrayDataCube:\n    # Print context for debugging\n    lnp(f\"UDF CONTEXT: {context}\")\n    lnp(f\"Vector Cube: {context._cube}\")\n    lnp(f\"Vector Geometry: {context._geometries}\")\n    \n    # Get the DataArray and ensure the correct dimension order\n    original_array = cube.get_array()\n    lnp(f\"Input cube shape: {original_array.shape}\")\n    lnp(f\"Input cube dimensions: {original_array.dims}\")\n    lnp(f\"Input cube coordinates: {list(original_array.coords.keys())}\")\n\n    return cube\n"
              },
              "result": true
            }
          }
        },
        "context": {
          "from_node": "1"
        },
        "dimension": "t"
      }
    }
  },
  "parameters": []
}
