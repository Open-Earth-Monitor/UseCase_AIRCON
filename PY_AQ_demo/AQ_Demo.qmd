---
title: "AQ Interpolation and Map Merging"
author: "Johannes Heisig"
date: "`r Sys.Date()`"
format: 
  html:
    embed-resources: true
knitr:
  opts_knit:
    root.dir: "/palma/scratch/tmp/jheisig/aq"
---

```{r}
#| output: false
library(dplyr)
library(tictoc)

source("/palma/home/j/jheisig/oemc_aq/functions.R")
```

## Read AQ Data  

Daily, monthly, or annual aggregates of AQ measurement data are imported according using `load_aq()`. Required inputs are the `pollutant`, the aggregation statistic ('mean' or 'perc') and a temporal selection. Specifying only the year (`y`) returns annual data. Additionally, specifying **either** the month (`m`) **or** the day of the year (`d`) returns monthly or daily data, respectively.

```{r read-aq, warning=FALSE}
y = 2015
m = 1
pollutant = "PM10"
stat = "perc"

aq = load_aq(pollutant, stat, y, m) 
```

## Add Covariates

Covariates are then loaded based using `load_covariates_EEA()`. The temporal extent is extracted from the AQ measurement data object. Thereby each covariate raster layer is warped to match the spatial grid of the 1 x 1 km Corine Land Cover (CLC) dataset. Warping is faster when setting `parallel=TRUE`.

By default our data covers the CAMS grid, which ranges from -25째 to 45째 longitude and 30째 to 72째 latitude. We can limit the extent by supplying a bounding box in the CRS of the data (*ETRS89-extended / LAEA Europe (EPSG: 3035)*). For this example we limit the covariates to mainland Europe and exclude e.g. Azores and Canary Islands.

Note: EEA uses different combinations of covariates for each pollutant, which the function accounts for.

-   PM10: log_cams, elevation, ws, rh, clc
-   PM2.5: log_cams, elevation, ws, clc
-   O3: cams, elevtion, ws, ssr
-   NO2: cams, elevation, elevation 5km, ws, ssr, S5P, pop, clc, clc 5km

```{r load-cov}
dem = readRDS("supplementary/static/COP-DEM/COP_DEM_Europe_mainland_10km_mask_epsg3035.rds")

aq_cov = load_covariates(aq, dem)

aq_cov
```

## Linear Models per Station-Area/-Type Group

Next, we need to specify the desired combination of station area and type

-   rural background (RB)
-   urban background (UB)
-   urban traffic (UT)

For each group, linear models are (a) trained and (b) predicted and finally added to (c) kriging residuals. A post-processing procedure is applied to merge the three outputs to a single map. In this example we only use rural background stations as input.

```{r linmod}
station_area_type = "RB"
aq = filter_area_type(aq, area_type = station_area_type)              

linmod = linear_aq_model(aq, aq_cov)
lm_measures(linmod)
```

## Predict Linear Model and Post-Process

Before predicting the linear model we check for missing classes of CLC data in the training data. The model is not able to make predictions for land cover classes it has not been trained for. Covariates are thus masked accordingly. A reason for a CLC class to be missing can be that a `station_area_type` such as 'rural background' by design excludes e.g. traffic areas.

After prediction, a back-transformation is applied to target variables which where log-transformed during model building.

```{r predict}
# predict
aq_cov$lm_pred = predict(linmod, newdata = aq_cov)
aq_cov$se = predict(linmod, newdata = aq_cov, se.fit = T)$se.fit
        
# transform back
if (attr(linmod, "log_transformed") == TRUE){
  aq_cov["lm_pred"] = exp(aq_cov["lm_pred"])
  aq_cov["se"] = exp(aq_cov["se"])
}
```

## Residual Kriging

The residuals of the linear model can now be interpolated using covariates. `krige_aq_residuals()` requires three objects:

- measurements (to retrieve locations)
- covariates (including a post-processed linear model prediction)
- linear model (to retrieve residuals and the formula)

The number of nearest neighbors to consider can be specified with `n.max`. Kriging can be parallelized with `n.cores` > 1.

```{r}
library(doParallel)
n.cores = 8
cl = makeCluster(n.cores)
registerDoParallel(cl)
clusterEvalQ(cl, {
  library(gstat);
  library(stars)
})

```

```{r krige}
tictoc::tic()
k = krige_aq_residuals(aq, aq_cov, linmod, n.max = 10, cv = T,
                       show.vario = F, cluster = cl, verbose = T)
tictoc::toc()

print(attr(k, "loo_cv"))
```

## Result

Model prediction and Kriging output are merged using `combine_results()`. To limit the linear model prediction to a certain value range, pass minimum and maximum to `trim_range`.

```{r plot, fig.height=7}
result = combine_results(aq_cov, k)

plot_aq_prediction(result)
```

The example shows interpolated PM10 during April 2020, the time of the first COVID-19-related lockdowns in Europe. Pollution was relatively low compared to e.g April 2019.

```{r}
plot_aq_se(result)
```

```{r}
stopCluster(cl)
```

